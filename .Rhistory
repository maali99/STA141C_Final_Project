data$cohort
data$period
data$area
data <- read.csv("customers_data.csv")
install.packages("GGally")
install.packages("GGally")
library(ggplot2)
library(GGally)
library(tidyverse)
library(car)
summary(data)
customers_2 <- data.frame(data$Fresh,data$Frozen)
names(customers_2) = c("Fresh", "Frozen")
ggpairs(customers_2)
ggpairs(customers_2)
## 80 of the sample size
smp_size <- floor(0.80 * nrow(customers_2))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(customers_2)), size = smp_size)
train <- customers_2[train_ind, ]
test <- customers_2[-train_ind, ]
## 2a
n=dim(customers_2)[1]
train_p=0.8;
N=100
n_clust=10
within_c_n=matrix(0,n_clust,N)
within_c=vector('numeric',0)
dfxy=customers_2
withinss <- function(group, x, centers, assignments) {
cent <- centers[group, ]
m <- rbind(cent, x[assignments==group, 1:2])
sum((as.matrix(dist(m))[1, ])^2)
}
predict.kmeans <- function(object,
newdata,
method = c("centers", "classes")) {
method <- match.arg(method)
centers <- object$centers
ss_by_center <- apply(centers, 1, function(x) {
colSums((t(newdata) - x) ^ 2)
})
best_clusters <- apply(ss_by_center, 1, which.min)
if (method == "centers") {
centers[best_clusters, ]
} else {
best_clusters
}
}
for(cl in 1:n_clust){
for(iter in 1:N){
train=sample(1:n,train_p*n)
train=sort(train)
test=sort(setdiff(1:n,train))
dfxy.km_train=kmeans(dfxy[train,1:2],centers=cl, nstart = 20, iter.max = 100)
centers <- dfxy.km_train$centers
assignments <-  as.numeric(row.names(predict.kmeans(dfxy.km_train, (dfxy[test,1:2]))))
within_c_n[cl,iter]=sum(sapply(seq(nrow(centers)), function(y){withinss(group=y,x = dfxy[test,1:2], centers = centers, assignments = assignments)}))
}
within_c[cl]=(mean(within_c_n[cl,]))
}
for(cl in 1:n_clust){
for(iter in 1:N){
train=sample(1:n,train_p*n)
train=sort(train)
test=sort(setdiff(1:n,train))
dfxy.km_train=kmeans(dfxy[train,1:2],centers=cl, nstart = 20, iter.max = 100)
centers <- dfxy.km_train$centers
assignments <-  as.numeric(row.names(predict.kmeans(dfxy.km_train, (dfxy[test,1:2]))))
within_c_n[cl,iter]=sum(sapply(seq(nrow(centers)), function(y){withinss(group=y,x = dfxy[test,1:2], centers = centers, assignments = assignments)}))
}
within_c[cl]=(mean(within_c_n[cl,]))
}
within_c
# 2b
par(mfrow=c(1,1))
plot(within_c, type = "b")
## choose k=3.
dfxy.km = kmeans(dfxy[,1:2], centers=3, nstart = 20, iter.max = 100)
dfxy.km$cluster
dfxy.km$size
customers_2$cl_kmeans = as.factor(dfxy.km$cluster)
scatterplotMatrix( ~ Fresh + Frozen| cl_kmeans, data = customers_2, diagonal=list(method="density"), smooth=FALSE,
main = "Scatter plot matrix")
ggpairs(customers_2, 1:3, mapping = ggplot2::aes(color = cl_kmeans, alpha = 0.5),
diag = list(continuous = wrap("densityDiag")),
lower=list(continuous = wrap("points", alpha=0.9)))
## hierachical clustering
centers_compute <-function(i,train,assignment_train){return(
colMeans(dfxy[which(assignment_train==i),1:2]))}
ass_hclust=function(i,method='complete',test){
dist_hclust=as.matrix(dist(rbind(dfxy[test,1:2],dfxy[assignment_train==i,1:2])))
n_dist=length(test)+length(which(assignment_train==i))
dist_hclust=as.matrix(dist_hclust)
if(method=='complete'){
return(sapply(1:length(test),function(j){max(dist_hclust[(length(test)+1):n_dist,j])}))}
if(method=='single'){
return(sapply(1:length(test),function(j){min(dist_hclust[(length(test)+1):n_dist,j])}))}
if(method=='average'){
return(sapply(1:length(test),function(j){mean(dist_hclust[(length(test)+1):n_dist,j])}))}
}
set.seed(16)
train_p=0.8;
N=100
n_clust=10
within_c_n=matrix(0,n_clust,N)
within_c=vector('numeric',0)
summary(dfxy)
attach(dfxy)
for(cl in 2:n_clust){
for(iter in 1:N){
train=sample(1:n,train_p*n)
train=sort(train)
test=sort(setdiff(1:n,train))
n_train=length(train)
test=sort(setdiff(1:n,train))
n_test=length(test)
within_c_n[1,iter]=var(dfxy[test,1])*(n_test-1)+var(dfxy[test,2])*(n_test-1)
datamat = dfxy[train,1:2]
dfxy.complete_train = hclust(dist(datamat), method = "complete")
assignment_train=cutree(dfxy.complete_train , cl)
clust_distance <- sapply(seq(cl),function(l){ass_hclust(l,method='complete',test=test)})
within_c_n[cl,iter]=sum(sapply(1:length(test),function(j){min(clust_distance[j,])}))
}
within_c[cl]=(mean(within_c_n[cl,],na.rm=TRUE))
}
within_c[1]=mean(within_c_n[1,])
within_c
par(mfrow=c(1,1))
plot(2:n_clust, within_c[2:n_clust])
## choose k=3
dfxy.complete = hclust(dist(customers_2[,1:2]), method = "complete")
assignment=cutree(dfxy.complete , 3)
## try k=3
dfxy.complete = hclust(dist(customers_2[,1:2]), method = "complete")
assignment=cutree(dfxy.complete , 3)
table(assignment)
customers_2$cl_complete=as.factor(assignment)
scatterplotMatrix( ~ Fresh + Frozen| cl_complete, data = customers_2, diagonal=list(method="density"), smooth=FALSE,
main = "Scatter plot matrix")
ggpairs(customers_2, c(1:2,4), mapping = ggplot2::aes(color = cl_complete, alpha = 0.5),
diag = list(continuous = wrap("densityDiag")),
lower=list(continuous = wrap("points", alpha=0.9)))
ggpairs(customers_2, 1:3, mapping = ggplot2::aes(color = cl_kmeans, alpha = 0.5),
diag = list(continuous = wrap("densityDiag")),
lower=list(continuous = wrap("points", alpha=0.9)))
cl_complete
cl_complete
customers_2$cl_complete
View(customers_2)
customers_2$cl_kmeans
scatterplotMatrix( ~ Fresh + Frozen| cl_complete, data = customers_2, diagonal=list(method="density"), smooth=FALSE,
main = "Scatter plot matrix")
ggpairs(customers_2, c(1:2,4), mapping = ggplot2::aes(color = cl_complete, alpha = 0.5),
diag = list(continuous = wrap("densityDiag")),
lower=list(continuous = wrap("points", alpha=0.9)))
within_c
for(cl in 2:n_clust){
for(iter in 1:N){
train=sample(1:n,train_p*n)
train=sort(train)
test=sort(setdiff(1:n,train))
n_train=length(train)
test=sort(setdiff(1:n,train))
n_test=length(test)
within_c_n[1,iter]=var(dfxy[test,1])*(n_test-1)+var(dfxy[test,2])*(n_test-1)
datamat = dfxy[train,1:2]
dfxy.complete_train = hclust(dist(datamat), method = "complete")
assignment_train=cutree(dfxy.complete_train , cl)
clust_distance <- sapply(seq(cl),function(l){ass_hclust(l,method='complete',test=test)})
within_c_n[cl,iter]=sum(sapply(1:length(test),function(j){min(clust_distance[j,])}))
}
within_c[cl]=(mean(within_c_n[cl,],na.rm=TRUE))
}
within_c
table(assignment)
scatterplotMatrix( ~ Fresh + Frozen| cl_complete, data = customers_2, diagonal=list(method="density"), smooth=FALSE,
main = "Scatter plot matrix")
ggpairs(customers_2, c(1:2,4), mapping = ggplot2::aes(color = cl_complete, alpha = 0.5),
diag = list(continuous = wrap("densityDiag")),
lower=list(continuous = wrap("points", alpha=0.9)))
data <- read.csv("customers_data.csv")
library(ggplot2)
library(ggplot2)
library(GGally)
library(tidyverse)
library(tidyverse)
library(car)
summary(data)
customers_2 <- data.frame(data$Fresh,data$Frozen)
names(customers_2) = c("Fresh", "Frozen")
ggpairs(customers_2)
ggpairs(customers_2)
## 80 of the sample size
smp_size <- floor(0.80 * nrow(customers_2))
## 80 of the sample size
smp_size <- floor(0.80 * nrow(customers_2))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(customers_2)), size = smp_size)
train <- customers_2[train_ind, ]
test <- customers_2[-train_ind, ]
## 2a
n=dim(customers_2)[1]
train_p=0.8;
N=100
n_clust=10
within_c_n=matrix(0,n_clust,N)
within_c=vector('numeric',0)
dfxy=customers_2
withinss <- function(group, x, centers, assignments) {
cent <- centers[group, ]
m <- rbind(cent, x[assignments==group, 1:2])
sum((as.matrix(dist(m))[1, ])^2)
}
predict.kmeans <- function(object,
newdata,
method = c("centers", "classes")) {
method <- match.arg(method)
centers <- object$centers
ss_by_center <- apply(centers, 1, function(x) {
colSums((t(newdata) - x) ^ 2)
})
best_clusters <- apply(ss_by_center, 1, which.min)
if (method == "centers") {
centers[best_clusters, ]
} else {
best_clusters
}
}
for(cl in 1:n_clust){
for(iter in 1:N){
train=sample(1:n,train_p*n)
train=sort(train)
test=sort(setdiff(1:n,train))
dfxy.km_train=kmeans(dfxy[train,1:2],centers=cl, nstart = 20, iter.max = 100)
centers <- dfxy.km_train$centers
assignments <-  as.numeric(row.names(predict.kmeans(dfxy.km_train, (dfxy[test,1:2]))))
within_c_n[cl,iter]=sum(sapply(seq(nrow(centers)), function(y){withinss(group=y,x = dfxy[test,1:2], centers = centers, assignments = assignments)}))
}
within_c[cl]=(mean(within_c_n[cl,]))
}
within_c
# 2b
par(mfrow=c(1,1))
plot(within_c, type = "b")
## choose k=3.
dfxy.km = kmeans(dfxy[,1:2], centers=3, nstart = 20, iter.max = 100)
dfxy.km$cluster
dfxy.km$cluster
dfxy.km$size
customers_2$cl_kmeans = as.factor(dfxy.km$cluster)
scatterplotMatrix( ~ Fresh + Frozen| cl_kmeans, data = customers_2, diagonal=list(method="density"), smooth=FALSE,
main = "Scatter plot matrix")
ggpairs(customers_2, 1:3, mapping = ggplot2::aes(color = cl_kmeans, alpha = 0.5),
diag = list(continuous = wrap("densityDiag")),
lower=list(continuous = wrap("points", alpha=0.9)))
## hierachical clustering
centers_compute <-function(i,train,assignment_train){return(
colMeans(dfxy[which(assignment_train==i),1:2]))}
ass_hclust=function(i,method='complete',test){
dist_hclust=as.matrix(dist(rbind(dfxy[test,1:2],dfxy[assignment_train==i,1:2])))
n_dist=length(test)+length(which(assignment_train==i))
dist_hclust=as.matrix(dist_hclust)
if(method=='complete'){
return(sapply(1:length(test),function(j){max(dist_hclust[(length(test)+1):n_dist,j])}))}
if(method=='single'){
return(sapply(1:length(test),function(j){min(dist_hclust[(length(test)+1):n_dist,j])}))}
if(method=='average'){
return(sapply(1:length(test),function(j){mean(dist_hclust[(length(test)+1):n_dist,j])}))}
}
set.seed(16)
train_p=0.8;
N=100
n_clust=10
within_c_n=matrix(0,n_clust,N)
within_c=vector('numeric',0)
summary(dfxy)
attach(dfxy)
for(cl in 2:n_clust){
for(iter in 1:N){
train=sample(1:n,train_p*n)
train=sort(train)
test=sort(setdiff(1:n,train))
n_train=length(train)
test=sort(setdiff(1:n,train))
n_test=length(test)
within_c_n[1,iter]=var(dfxy[test,1])*(n_test-1)+var(dfxy[test,2])*(n_test-1)
datamat = dfxy[train,1:2]
dfxy.complete_train = hclust(dist(datamat), method = "complete")
assignment_train=cutree(dfxy.complete_train , cl)
clust_distance <- sapply(seq(cl),function(l){ass_hclust(l,method='complete',test=test)})
within_c_n[cl,iter]=sum(sapply(1:length(test),function(j){min(clust_distance[j,])}))
}
within_c[cl]=(mean(within_c_n[cl,],na.rm=TRUE))
}
within_c[1]=mean(within_c_n[1,])
within_c
par(mfrow=c(1,1))
plot(2:n_clust, within_c[2:n_clust])
## choose k=3
dfxy.complete = hclust(dist(customers_2[,1:2]), method = "complete")
assignment=cutree(dfxy.complete , 3)
## try k=3
dfxy.complete = hclust(dist(customers_2[,1:2]), method = "complete")
assignment=cutree(dfxy.complete , 3)
table(assignment)
customers_2$cl_complete=as.factor(assignment)
scatterplotMatrix( ~ Fresh + Frozen| cl_complete, data = customers_2, diagonal=list(method="density"), smooth=FALSE,
main = "Scatter plot matrix")
ggpairs(customers_2, c(1:2,4), mapping = ggplot2::aes(color = cl_complete, alpha = 0.5),
diag = list(continuous = wrap("densityDiag")),
lower=list(continuous = wrap("points", alpha=0.9)))
scatterplotMatrix( ~ Fresh + Frozen| cl_kmeans, data = customers_2, diagonal=list(method="density"), smooth=FALSE,
main = "Scatter plot matrix")
ggpairs(customers_2, 1:3, mapping = ggplot2::aes(color = cl_kmeans, alpha = 0.5),
diag = list(continuous = wrap("densityDiag")),
lower=list(continuous = wrap("points", alpha=0.9)))
?kmeans
ggpairs(customers_2, c(1:2,4), mapping = ggplot2::aes(color = cl_complete, alpha = 0.5),
diag = list(continuous = wrap("densityDiag")),
lower=list(continuous = wrap("points", alpha=0.9)))
dfxy.km$size
dfxy.km$cluster
dfxy.km$totss
dfxy.km$iter
dfxy.km$centers
load("~/School/STA 141A/.RData")
library(dplyr)
library(readxl)
data <- read_xlsx("world_cup_2018_squads.xlsx")
arrange(unique(filter(data, Goals > 30)), desc(Goals))
View(data)
data %>% mutate(Name = lead(Position))
arrange(unique(filter(data, Goals > 30)), desc(Goals))
data <- read_xlsx("world_cup_2018_squads.xlsx")
arrange(unique(filter(data, Goals > 30)), desc(Goals))
arrange(unique(filter(data, Goals > 30 & Type == "Age")), desc(Goals))
arrange(filter(data, Goals > 30 & Type == "Age")
arrange(filter(data, Goals > 30 & Type == "Age"))
arrange(filter(data, Goals > 30 & Type == "Age"))
arrange(filter(data, Type == "Age"))
filter(data, Type == "Age")
select(filter(data, Type == "Age"), Team:Country and Club)
select(filter(data, Type == "Age"), Team:Country and Club)
select(filter(data, Type == "Age"), Team:`Country and Club`)
select(filter(data, Type == "Age"), Team:Goals)
library(bestglm)
# Model Selection
model = glm(Goals ~ DOB + Position + Caps, data = data, family = binomial())
View(data)
# Model Selection
model = glm(Goals ~ DOB + Position + Caps, data = data)
summary(model)
# Model Selection
model = lm(Goals ~ DOB + Position + Caps, data = data)
summary(model)
# Model Selection
model = lm(Goals ~ Position + Caps, data = data)
summary(model)
summarise(data)
summarise(model)
summarise(filter(data,Goals >30))
rep(1,15)
list = c(rep(0,2),rep(1,15),rep(2,45),rep(3,25),rep(4,10),rep(6,3))
list
length(list)
sample(list,10,replace =FALSE)
set.seed(100)
sample = sample(list,10,replace =FALSE)
sample
sample = sample(list,10,replace =FALSE)
sample
sum(sample)
31/10
var(sample)
var(list)
sample
list <- c(rep(0,14),rep(1,16),rep(2,14),rep(3,15),rep(4,13),rep(5,16),rep(6,12))
mean(list)
install.packages("caret")
install.packages("Rcpp")
frobeniusR <- function(X) {
sum(X^2)
}
X <- matrix(runif(1e7), nc = 1e3)
X <- matrix(runif(1e7), nc = 1e3)
system.time(frobeniusR(X))
colSumsR <- function(x) {
m <- ncol(x)
n <- nrow(x)
output <- double(m)
for (j in seq_len(m)) {
output[j] = 0
for (i in seq_len(n))
output[j] = output[j] + x[i, j] }
output
}
(x <- matrix(rnorm(9), nc = 3))
rm(x)
rm(X)
rm(colSumsC,colSumsR)
rm(frobeniusR())
rm(frobeniusR)
frobeniusR <- function(X) {
sum(X^2)
}
X <- matrix(runif(1e7), nc = 1e3)
system.time(frobeniusR(X))
colSumsR <- function(x) {
m <- ncol(x)
n <- nrow(x)
output <- double(m)
for (j in seq_len(m)) {
output[j] = 0
for (i in seq_len(n))
output[j] = output[j] + x[i, j] }
output
}
bench::mark(
"origin" = {colSumsR},
"newversion" = {colSumsR})
rm(colSumsC,colSumsR())
rm(colSumsC,colSumsR)
frobeniusR <- function(X) {
sum(X^2)
}
X <- matrix(runif(1e7), nc = 1e3)
system.time(frobeniusR(X))
bench::mark(
"origin" = {frobeniusR()},
"newversion" = {frobeniusC()})
bench::mark(
"origin" = {frobeniusR(X)},
"newversion" = {frobeniusC(X)})
X <- matrix(runif(1e7), nc = 1e3)
system.time(frobeniusR(X))
frobeniusR(X)
type(frobeniusR(X))
typeof(frobeniusR(X))
typeof(frobeniusR(X))
typeof(output)
bench::mark(
"origin" = {frobeniusR(X)},
"newversion" = {frobeniusC(X)})
bench::mark(
"origin" = {frobeniusR(X)},
"newversion" = {as.double(frobeniusC(X))})
frobeniusC(X)
frobeniusC(X)
bench::mark(
"origin" = {frobeniusR(X)},
"newversion" = {as.double(frobeniusC(X))})
frobeniusC(X)
typeof(frobeniusC(X))
typeof(frobeniusR(X))
(frobeniusR(X))
std::transform(Array1.begin(), Array1.end(), Array1.begin(), (double(*)(double)) sqrt);
frobeniusC(X)
sum(frobeniusC(X)^2)
sum(frobeniusC(X))
bench::mark(
"origin" = {frobeniusR(X)},
"newversion" = {sum(frobeniusC(X))})
typeof(sum(frobeniusC(X)))
typeof(frobeniusR(X))
frobeniusC(X) == frobeniusR(X)
X
typeof(X)
is.vector(X)
X[1]
X[2]
bench::mark(
"origin" = {frobeniusR(X)},
"newversion" = {sum(frobeniusC(X))})
bench::mark(
"origin" = {frobeniusR(X)},
"newversion" = {sum(frobeniusC(X))})
bench::mark(
"origin" = {frobeniusR(X)},
"newversion" = {frobeniusC(X)})
frobeniusR(X)
frobeniusC(X)
sum(frobeniusC(X))
frobeniusC(X)
bench::mark(
"origin" = {frobeniusR(X)},
"newversion" = {sum(frobeniusC(X))})
frobeniusC(X) == frobeniusR(X)
frobeniusR()
frobeniusR()
frobeniusR(X)
sum(frobeniusC(X))
4998487 - 3332093
bench::mark(
"origin" = {frobeniusR(X)},
"newversion" = {sum(frobeniusC(X)) - 1666394})
sum(frobeniusC(X)) - 1666394 = frobeniusR(X)
sum(frobeniusC(X)) - 1666394 == frobeniusR(X)
sum(frobeniusC(X)) - 1666394
frobeniusR(X)
3332093 == 3332093
typeof(frobeniusR(X))
typeof(frobeniusC(X))
data <- read.table("adult (1).data")
setwd("~/School/STA 141C")
data <- read.table("adult (1).data")
setwd("~/GitHub/STA141C_Final_Project")
data <- read.table("adult.data")
scatter.smooth(data$month,data$pm2.5)
scatter.smooth(data$V2,data$V4)
